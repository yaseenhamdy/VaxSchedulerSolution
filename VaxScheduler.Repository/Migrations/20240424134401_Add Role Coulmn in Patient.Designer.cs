// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaxScheduler.Repository.Data;

#nullable disable

namespace VaxScheduler.Repository.Migrations
{
    [DbContext(typeof(VaxDbContext))]
    [Migration("20240424134401_Add Role Coulmn in Patient")]
    partial class AddRoleCoulmninPatient
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VaxScheduler.Core.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinationCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccinationCenterId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccinationCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("VaccinationCenterId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.PatientVaccine", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("patientVaccines");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.VaccinationCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("VaccinationCenters");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("DurationBetweenDoses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.VaccineVaccinationCenter", b =>
                {
                    b.Property<int>("VaccinationCenterId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("VaccinationCenterId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("vaccineVaccinationCenters");
                });

            modelBuilder.Entity("VaxScheduler.Core.Identity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Certificate", b =>
                {
                    b.HasOne("VaxScheduler.Core.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VaxScheduler.Core.Entities.VaccinationCenter", "VaccinationCenter")
                        .WithMany()
                        .HasForeignKey("VaccinationCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("VaccinationCenter");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Patient", b =>
                {
                    b.HasOne("VaxScheduler.Core.Identity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VaxScheduler.Core.Entities.VaccinationCenter", "VaccinationCenter")
                        .WithMany()
                        .HasForeignKey("VaccinationCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("VaccinationCenter");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.PatientVaccine", b =>
                {
                    b.HasOne("VaxScheduler.Core.Entities.Patient", "Patient")
                        .WithMany("patientVaccines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VaxScheduler.Core.Entities.Vaccine", "Vaccine")
                        .WithMany("patientVaccines")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.VaccinationCenter", b =>
                {
                    b.HasOne("VaxScheduler.Core.Identity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Vaccine", b =>
                {
                    b.HasOne("VaxScheduler.Core.Identity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.VaccineVaccinationCenter", b =>
                {
                    b.HasOne("VaxScheduler.Core.Entities.VaccinationCenter", "VaccinationCenter")
                        .WithMany("VaccineVaccinationCenter")
                        .HasForeignKey("VaccinationCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VaxScheduler.Core.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineVaccinationCenter")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VaccinationCenter");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Patient", b =>
                {
                    b.Navigation("patientVaccines");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.VaccinationCenter", b =>
                {
                    b.Navigation("VaccineVaccinationCenter");
                });

            modelBuilder.Entity("VaxScheduler.Core.Entities.Vaccine", b =>
                {
                    b.Navigation("VaccineVaccinationCenter");

                    b.Navigation("patientVaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
